import subprocess
import sys
import json
import os
import time
import threading
from http.server import SimpleHTTPRequestHandler, HTTPServer

REPORT_FILE = "report.html"
SEMGRP_JSON_FILE = "semgrep_report.json"
PORT = 8000

def run_command(command, timeout=900):
    """Executes a shell command with a timeout, tracks runtime, and returns the output."""
    start_time = time.time()
    
    try:
        result = subprocess.run(command, shell=True, check=True, text=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=timeout)
        output = result.stdout
    except subprocess.TimeoutExpired:
        output = f"Timeout: Command exceeded {timeout} seconds: {command}"
    except subprocess.CalledProcessError as e:
        output = f"Error executing command: {e}"
    
    end_time = time.time()
    duration = end_time - start_time

    print(f"\n[âœ”] Command: {command}")
    print(f"    - Start: {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(start_time))}")
    print(f"    - End: {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(end_time))}")
    print(f"    - Duration: {duration:.2f} seconds\n")
    
    return output

def run_semgrep():
    """Runs Semgrep on the current working directory and structures results."""
    print("\nRunning Semgrep Security Scan...\n")
    semgrep_command = f"semgrep --config=auto --json > {SEMGRP_JSON_FILE}"
    run_command(semgrep_command)

    try:
        with open(SEMGRP_JSON_FILE, "r") as file:
            data = json.load(file)
    except FileNotFoundError:
        print("Error: Semgrep report file not found.")
        return {}

    sorted_results = {}
    for result in data.get("results", []):
        if "comment" in result["extra"].get("metadata", {}).get("category", "").lower():
            continue  # Ignore comments

        category = result["check_id"].split(".")[1]  
        file_path = result["path"]
        line_number = result["start"]["line"]

        if category not in sorted_results:
            sorted_results[category] = {"severity": result["extra"].get("severity", "Unknown"), "files": {}}

        if file_path not in sorted_results[category]["files"]:
            sorted_results[category]["files"][file_path] = []

        sorted_results[category]["files"][file_path].append(line_number)

    return sorted_results

def generate_html_report(results, semgrep_results):
    """Generates an interactive HTML report with penetration testing & Semgrep results."""
    html_template = """
    <html>
    <head>
        <title>Security & Penetration Test Report</title>
        <style>
            body { font-family: Arial, sans-serif; background-color: #f4f4f4; color: #333; }
            .container { width: 80%; margin: auto; background: white; padding: 20px; box-shadow: 0px 0px 10px rgba(0,0,0,0.1); }
            h2 { color: #1e3a8a; }
            .section { border-bottom: 1px solid #ddd; padding: 10px 0; }
            .output { white-space: pre-wrap; background: #e0e7ff; padding: 10px; display: none; }
            .toggle { color: #007bff; cursor: pointer; }
        </style>
        <script>
            function toggleVisibility(id) {
                var elem = document.getElementById(id);
                elem.style.display = (elem.style.display === "none") ? "block" : "none";
            }
        </script>
    </head>
    <body>
        <div class="container">
            <h1>Security & Penetration Test Report</h1>
    """
    
    sections = ""
    for title, output in results.items():
        lines = output.split('\n')
        preview = '\n'.join(lines[:10]) + ('\n--more--' if len(lines) > 10 else '')
        
        sections += """
        <div class="section">
            <h2>{}</h2>
            <pre>{}</pre>
            {} 
            <pre id="{}" class="output">{}</pre>
        </div>
        """.format(
            title,
            preview,
            '<span class="toggle" onclick="toggleVisibility(\'' + title + '\')">Show More</span>' if len(lines) > 10 else '',
            title,
            output
        )
    
    sections += "<h2>Semgrep Security Findings</h2>"
    for category, data in semgrep_results.items():
        sections += "<h3>{} (Severity: {})</h3>".format(category, data["severity"])
        for file, lines in data["files"].items():
            sections += "<p><b>{}</b>: Lines {}</p>".format(file, ', '.join(map(str, lines)))

    html_template += sections + """
        </div>
    </body>
    </html>
    """
    
    with open(REPORT_FILE, "w") as f:
        f.write(html_template)

def start_http_server():
    """Starts an HTTP server to serve the report."""
    server_address = ("", PORT)
    httpd = HTTPServer(server_address, SimpleHTTPRequestHandler)
    print(f"\nReport available at: http://localhost:{PORT}/{REPORT_FILE}")
    httpd.serve_forever()

def main():
    print("\nStarting automated penetration testing...\n")
    target = input("Enter the IP address or domain to scan: ")

    commands = {
        "Host Discovery": f"nmap -sn {target}",
        "Full Port Scan": f"nmap -p- -T4 {target}",
        "OS and Version Detection": f"sudo nmap -O -A {target}",
        "Web Enumeration": f"nmap --script=http-title,http-headers,http-methods -p 80,443 {target}",
        "DNS Enumeration": f"nmap --script=dns-brute,dns-zone-transfer -p 53 {target}",
        "Vulnerability Scan": f"nmap --script=vulners -sV {target}",
        "Firewall Evasion Scan": f"nmap -f --mtu 16 {target}",
        "Nikto Scan (Basic)": f"nikto -h {target}",
        "Nikto Scan (SSL)": f"nikto -h {target} -ssl",
        "WhatWeb Scan": f"whatweb {target}",
    }
    
    results = {}
    for title, cmd in commands.items():
        print(f"Running {title}...")
        results[title] = run_command(cmd)

    # Run Semgrep scan after Hydra
    semgrep_results = run_semgrep()

    # Generate the report
    generate_html_report(results, semgrep_results)
    print("\nReport generated. Access it at: ")

    # Start HTTP server in a separate thread
    threading.Thread(target=start_http_server, daemon=True).start()

if __name__ == "__main__":
    main()

