import subprocess
import sys
import os
from http.server import SimpleHTTPRequestHandler, HTTPServer

def run_command(command):
    try:
        result = subprocess.run(command, shell=True, check=True, text=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        return f"Error executing command: {e.stderr.strip()}"

def generate_html_report(results):
    html_template = """
    <html>
    <head>
        <title>Penetration Test Report</title>
        <style>
            body { font-family: Arial, sans-serif; background-color: #f4f4f4; color: #333; }
            .container { width: 80%; margin: auto; background: white; padding: 20px; box-shadow: 0px 0px 10px rgba(0,0,0,0.1); }
            h2 { color: #1e3a8a; }
            .section { border-bottom: 1px solid #ddd; padding: 10px 0; }
            .output { white-space: pre-wrap; background: #e0e7ff; padding: 10px; display: none; }
            .toggle { color: #007bff; cursor: pointer; }
        </style>
        <script>
            function toggleVisibility(id) {
                var elem = document.getElementById(id);
                if (elem.style.display === "none") {
                    elem.style.display = "block";
                } else {
                    elem.style.display = "none";
                }
            }
        </script>
    </head>
    <body>
        <div class="container">
            <h1>Penetration Test Report</h1>
    """
    
    sections = ""
    for title, output in results.items():
        lines = output.split('\n')
        preview = '\n'.join(lines[:10]) + ('\n--more--' if len(lines) > 10 else '')
        
        sections += """
        <div class="section">
            <h2>{}</h2>
            <pre>{}</pre>
            {} 
            <pre id="{}" class="output">{}</pre>
        </div>
        """.format(title, preview, 
                   f'<span class="toggle" onclick="toggleVisibility(\'{title}\')">Show More</span>' if len(lines) > 10 else '',
                   title, output)
    
    html_template += sections + """
        </div>
    </body>
    </html>
    """
    
    with open("report.html", "w") as f:
        f.write(html_template)

def start_server():
    port = 8000
    server_address = ("", port)
    httpd = HTTPServer(server_address, SimpleHTTPRequestHandler)
    print(f"http://localhost:{port}/report.html")
    httpd.serve_forever()

def main():
    target = input("Enter the IP address or domain to scan: ")
    print("\nStarting automated penetration testing...\n")

    commands = {
        "Host Discovery": f"nmap -sn {target}",
        "Full Port Scan": f"nmap -p- -T4 {target}",
        "OS and Version Detection": f"sudo nmap -O -A {target}",
        "Web Enumeration": f"nmap --script=http-title,http-headers,http-methods -p 80,443 {target}",
        "DNS Enumeration": f"nmap --script=dns-brute,dns-zone-transfer -p 53 {target}",
        "Vulnerability Scan": f"nmap --script=vulners -sV {target}",
        "Firewall Evasion Scan": f"nmap -f --mtu 16 {target}",
        "Nikto Scan (Basic)": f"nikto -h {target}",
        "Nikto Scan (Tuning 2)": f"nikto -h {target} -Tuning 2",
        "Nikto Scan (CGI Plugin)": f"nikto -h {target} -Plugins cgi",
        "Nikto Scan (SSL)": f"nikto -h {target} -ssl",
        "Nikto Scan (Tuning 9)": f"nikto -h {target} -Tuning 9",
        "Nikto Scan (Vuln Plugin)": f"nikto -h {target} -Plugins vuln",
        "Nikto Scan (Display V)": f"nikto -h {target} -Display V",
        "Nikto Scan (XSS Plugin)": f"nikto -h {target} -Plugins xss",
        "Nikto Scan (Tuning 3)": f"nikto -h {target} -Tuning 3",
        "WhatWeb Scan": f"whatweb {target}",
        "Hydra SSH Brute Force": f"hydra -l root -P /usr/share/wordlists/rockyou.txt.gz ssh://{target}",
        "Hydra HTTP POST Form Brute Force": f"hydra -l admin -P /usr/share/wordlists/rockyou.txt.gz {target} http-post-form \"/wp-login.php:log^USER^&pwd-^PASS^:F=incorrect\""
    }
    
    results = {}
    for title, cmd in commands.items():
        print(f"Running {title}...")
        results[title] = run_command(cmd)
    
    generate_html_report(results)
    print("\nReport generated. Access it at:")
    start_server()

if __name__ == "__main__":
    main()

