import subprocess
import sys
import json
import os
import time
import threading
from http.server import SimpleHTTPRequestHandler, HTTPServer
from langchain.llms import OpenAI
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain

REPORT_FILE = "report.html"
SEMGRP_JSON_FILE = "semgrep_report.json"
PORT = 8000

# Initialize OpenAI model (Make sure your API key is set)
llm = OpenAI(model="text-davinci-003")

# LangChain remediation prompt
remediation_prompt_template = """
Given the following vulnerability findings, suggest a detailed remediation plan:

Vulnerability Category: {category}
Severity: {severity}
Affected File(s): {files}
Vulnerable Line(s): {lines}

Remediation steps:
"""

prompt = PromptTemplate(input_variables=["category", "severity", "files", "lines"], template=remediation_prompt_template)
llm_chain = LLMChain(llm=llm, prompt=prompt)

def run_command(command, timeout=900):
    start_time = time.time()
    
    try:
        result = subprocess.run(command, shell=True, check=True, text=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=timeout)
        output = result.stdout
    except subprocess.TimeoutExpired:
        output = f"Timeout: Command exceeded {timeout} seconds: {command}"
    except subprocess.CalledProcessError as e:
        output = f"Error executing command: {e}"
    
    end_time = time.time()
    duration = end_time - start_time

    print(f"\n[âœ”] Command: {command}")
    print(f"    - Start: {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(start_time))}")
    print(f"    - End: {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(end_time))}")
    print(f"    - Duration: {duration:.2f} seconds\n")
    
    return output

def run_semgrep():
    print("\nRunning Semgrep Security Scan...\n")
    semgrep_command = f"semgrep --config=auto --json > {SEMGRP_JSON_FILE}"
    run_command(semgrep_command)

    try:
        with open(SEMGRP_JSON_FILE, "r") as file:
            data = json.load(file)
    except FileNotFoundError:
        print("Error: Semgrep report file not found.")
        return {}

    sorted_results = {}
    for result in data.get("results", []):
        if "comment" in result["extra"].get("metadata", {}).get("category", "").lower():
            continue 

        category = result["check_id"].split(".")[1]  
        file_path = result["path"]
        line_number = result["start"]["line"]

        if category not in sorted_results:
            sorted_results[category] = {"severity": result["extra"].get("severity", "Unknown"), "files": {}}

        if file_path not in sorted_results[category]["files"]:
            sorted_results[category]["files"][file_path] = []

        sorted_results[category]["files"][file_path].append(line_number)

    return sorted_results

def generate_html_report(results, semgrep_results):
    html_template = """
    <html>
    <head>
        <title>Security & Penetration Test Report</title>
        <style>
            body { font-family: Arial, sans-serif; background-color: #f4f4f4; color: #333; }
            .container { width: 80%; margin: auto; background: white; padding: 20px; box-shadow: 0px 0px 10px rgba(0,0,0,0.1); }
            h2 { color: #1e3a8a; }
            .section { border-bottom: 1px solid #ddd; padding: 10px 0; }
            .output { white-space: pre-wrap; background: #e0e7ff; padding: 10px; }
            .remediation { background-color: #e0f7fa; padding: 10px; border: 1px solid #00695c; }
            a { color: #1e3a8a; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>Security & Penetration Test Report</h1>
            <p>Click <a href="http://localhost:{port}/report.html" target="_blank">here</a> to view the report.</p>
    """
    
    sections = ""
    remediation_steps = {}
    
    for category, data in semgrep_results.items():
        severity = data["severity"]
        for file, lines in data["files"].items():
            files = file
            lines_str = ', '.join(map(str, lines))
            print(f"Generating remediation for {category} in {files} at lines {lines_str}...")
            
            # Generate remediation suggestion using LangChain
            remediation_steps[category] = llm_chain.run(category=category, severity=severity, files=files, lines=lines_str)

            sections += """
            <div class="section">
                <h2>{}</h2>
                <p><b>Severity:</b> {}</p>
                <p><b>Files affected:</b> {}</p>
                <p><b>Lines affected:</b> {}</p>
                <p><b>Suggested Remediation:</b></p>
                <div class="remediation"><pre>{}</pre></div>
            </div>
            """.format(category, severity, files, lines_str, remediation_steps[category])

    html_template += sections + """
        </div>
    </body>
    </html>
    """
    
    with open(REPORT_FILE, "w") as f:
        f.write(html_template)

def run_server():
    # Simple HTTP server to serve the generated report
    handler = SimpleHTTPRequestHandler
    os.chdir(os.path.dirname(os.path.abspath(REPORT_FILE)))  # Change directory to where the report is saved
    httpd = HTTPServer(('localhost', PORT), handler)
    print(f"Serving the report at: http://localhost:{PORT}/report.html")
    httpd.serve_forever()

def main():
    print("\nStarting automated penetration testing...\n")
    target = input("Enter the IP address or domain to scan: ")

    commands = {
        "Host Discovery": f"nmap -sn {target}",
        "Full Port Scan": f"nmap -p- -T4 {target}",
        "OS and Version Detection": f"sudo nmap -O -A {target}",
        "Web Enumeration": f"nmap --script=http-title,http-headers,http-methods -p 80,443 {target}",
        "DNS Enumeration": f"nmap --script=dns-brute,dns-zone-transfer -p 53 {target}",
        "Vulnerability Scan": f"nmap --script=vulners -sV {target}",
        "Firewall Evasion Scan": f"nmap -f --mtu 16 {target}",
        "Nikto Scan (Basic)": f"nikto -h {target}",
        "Nikto Scan (SSL)": f"nikto -h {target} -ssl",
        "WhatWeb Scan": f"whatweb {target}",
    }
    
    results = {}
    for title, cmd in commands.items():
        print(f"Running {title}...")
        results[title] = run_command(cmd)

    semgrep_results = run_semgrep()

    generate_html_report(results, semgrep_results)

    # Start the server to serve the report
    threading.Thread(target=run_server, daemon=True).start()

    # Give user a clickable link to the report
    print(f"\nReport generated. You can access it at: http://localhost:{PORT}/report.html")

if __name__ == "__main__":
    main()
