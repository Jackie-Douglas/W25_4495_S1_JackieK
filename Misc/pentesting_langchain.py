import subprocess
import sys
import json
import os
import time
import threading
from http.server import SimpleHTTPRequestHandler, HTTPServer
from langchain.llms import OpenAI
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain

OUTPUT_FILE = "output.html"
ANALYSIS_FILE = "analysis.html"
SEMGRP_JSON_FILE = "semgrep_report.json"
PORT = 8000

# Initialize OpenAI model
llm = OpenAI(model="text-davinci-003")

# LangChain remediation prompt
template = """
Given the following vulnerability findings, suggest a detailed remediation plan:

Vulnerability Category: {category}
Severity: {severity}
Affected File(s): {files}
Vulnerable Line(s): {lines}

Remediation steps:
"""
prompt = PromptTemplate(input_variables=["category", "severity", "files", "lines"], template=template)
llm_chain = LLMChain(llm=llm, prompt=prompt)

def run_command(command):
    start_time = time.time()
    try:
        result = subprocess.run(command, shell=True, check=True, text=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        output = result.stdout
    except subprocess.CalledProcessError as e:
        output = f"Error executing command: {e}"
    
    end_time = time.time()
    duration = end_time - start_time
    
    log_entry = f"\n[✔] Command: {command}\n"
    log_entry += f"    - Start: {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(start_time))}\n"
    log_entry += f"    - End: {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(end_time))}\n"
    log_entry += f"    - Duration: {duration:.2f} seconds\n"
    log_entry += f"    - Output:\n{output}\n"
    
    with open(OUTPUT_FILE, "a") as f:
        f.write(log_entry)
    
    return output

def run_semgrep():
    print("\nRunning Semgrep Security Scan...\n")
    semgrep_command = f"semgrep --config=auto --json > {SEMGRP_JSON_FILE}"
    run_command(semgrep_command)
    
    try:
        with open(SEMGRP_JSON_FILE, "r") as file:
            data = json.load(file)
    except FileNotFoundError:
        print("Error: Semgrep report file not found.")
        return {}

    return data

def generate_analysis():
    with open(OUTPUT_FILE, "r") as f:
        output_data = f.read()
    
    analysis = llm_chain.run(category="Pentest Report", severity="High", files="N/A", lines=output_data)
    
    with open(ANALYSIS_FILE, "w") as f:
        f.write(f"<html><head><title>Analysis Report</title></head><body><h1>Analysis Report</h1><pre>{analysis}</pre></body></html>")

def run_server():
    handler = SimpleHTTPRequestHandler
    os.chdir(os.path.dirname(os.path.abspath(OUTPUT_FILE)))
    httpd = HTTPServer(('localhost', PORT), handler)
    print(f"Serving reports at: http://localhost:{PORT}/output.html and http://localhost:{PORT}/analysis.html")
    httpd.serve_forever()

def main():
    print("\nStarting automated penetration testing...\n")
    target = input("Enter the IP address or domain to scan: ")
    
    categories = {
        "Host & Network Scanning": [
            f"nmap -sn {target}",
            f"nmap -p- -T4 {target}",
            f"sudo nmap -O -A {target}",
            f"nmap -f --mtu 16 {target}"
        ],
        "Web & DNS Enumeration": [
            f"nmap --script=http-title,http-headers,http-methods -p 80,443 {target}",
            f"nmap --script=dns-brute,dns-zone-transfer -p 53 {target}",
            f"whatweb {target}",
            f"nikto -h {target}",
            f"nikto -h {target} -ssl"
        ],
        "Vulnerability Scanning": [
            f"nmap --script=vulners -sV {target}",
            "cd Sn1per && sudo sniper -t {target} -m full && cd .."
        ],
        "SQL Injection Testing": [
            f"sqlmap -u \"{target}\" --crawl=2 --dbs --random-agent",
            f"sqlmap -u \"{target}\" –passwords",
            f"sqlmap -u \"{target}\" --forms --crawl=3 --risk=3 --level=5 --tamper=space2comment,charencode --random-agent --batch"
        ],
        "Credential Brute-Forcing": [
            f"proxychains hydra -L /usr/share/wordlists/metasploit/common_roots.txt -P /usr/share/wordlists/rockyou.txt -t 1 -w 5 {target} ssh",
            f"proxychains hydra -L /usr/share/wordlists/metasploit/common_roots.txt -P /usr/share/wordlists/rockyou.txt -t 1 -w 5 {target} ftp",
            f"proxychains hydra -L /usr/share/wordlists/metasploit/common_roots.txt -P /usr/share/wordlists/rockyou.txt -t 1 -w 5 {target} rdp",
            f"hydra -l admin -P /usr/share/wordlists/rockyou.txt {target} https-post-form \"/users/sign_in:email=^USER^&password=^PASS^:F=Invalid email or password.\""
        ],
        "Cross-Site Scripting (XSS) Testing": [
            f"xsser -u \"{target}\" -c 100 –Cl"
        ]
    }
    
    with open(OUTPUT_FILE, "w") as f:
        f.write("<html><head><title>Penetration Test Output</title></head><body><h1>Penetration Test Output</h1><pre>")
    
    for category, commands in categories.items():
        print(f"\n[+] Running {category}...")
        with open(OUTPUT_FILE, "a") as f:
            f.write(f"\n\n### {category} ###\n\n")
        for cmd in commands:
            run_command(cmd)
    
    with open(OUTPUT_FILE, "a") as f:
        f.write("</pre></body></html>")
    
    run_semgrep()
    generate_analysis()
    threading.Thread(target=run_server, daemon=True).start()
    print(f"\nReports generated. Access them at:\n- Output: http://localhost:{PORT}/output.html\n- Analysis: http://localhost:{PORT}/analysis.html")

if __name__ == "__main__":
    main()