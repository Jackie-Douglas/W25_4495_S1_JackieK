import subprocess
import os
import time
import threading
import logging
import re
from http.server import SimpleHTTPRequestHandler, HTTPServer
import ollama

OUTPUT_FILE = "output.html"
ANALYSIS_FILE = "analysis.html"
PORT = 8000
TARGETS = []
THREAD_COUNT = 5

def run_command(command, category):
    start_time = time.time()
    print(f"[+] Running command: {command}")
    try:
        result = subprocess.run(command, shell=True, check=True, text=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        output = result.stdout + "\n" + result.stderr
    except subprocess.CalledProcessError as e:
        output = f"Error executing command: {e}\n{e.stderr}"

    end_time = time.time()
    duration = end_time - start_time
    timestamp = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(start_time))
    
    with open(OUTPUT_FILE, "a") as f:
        f.write(f"<h2>{category}</h2><pre>{timestamp}\n{command}\n{output}</pre>\n")
    
    return output

def validate_target(target):
    url_pattern = r"^(https?://)?([a-zA-Z0-9.-]+)(?::(\d+))?$"
    match = re.match(url_pattern, target)
    if match:
        domain_or_ip = match.group(2)
        port = match.group(3) if match.group(3) else "80"
        return domain_or_ip, port
    return None, None

def generate_html_report(content):
    return f"""<html><head><title>Penetration Test Output</title></head><body>{content}</body></html>"""

def generate_analysis():
    with open(OUTPUT_FILE, "r") as f:
        output_data = f.read()
    
    prompt = f"""
    Given the following vulnerability findings, suggest a detailed remediation plan:

    {output_data}
    
    Provide a structured analysis including severity assessment and remediation steps.
    """
    try:
        response = ollama.chat(model='llama3', messages=[{"role": "user", "content": prompt}])
        analysis = response['message']['content']
        with open(ANALYSIS_FILE, "w") as f:
            f.write(generate_html_report(f"<h1>Analysis Report</h1><pre>{analysis}</pre>"))
    except Exception as e:
        logging.error(f"Error generating analysis: {e}")
        with open(ANALYSIS_FILE, "w") as f:
            f.write(generate_html_report("<h1>Analysis Report</h1><pre>Analysis generation failed due to an error.</pre>"))

def run_server():
    handler = SimpleHTTPRequestHandler
    os.chdir(os.path.dirname(os.path.abspath(OUTPUT_FILE)))
    httpd = HTTPServer(('localhost', PORT), handler)
    print(f"Serving reports at: http://localhost:{PORT}/output.html and http://localhost:{PORT}/analysis.html")
    httpd.serve_forever()

def scan_target(target):
    domain_or_ip, port = validate_target(target)
    if not domain_or_ip:
        logging.error(f"Invalid target: {target}")
        return

    commands = {
        "Host & Network Scanning": [
            f"nmap -sn {domain_or_ip}",
            f"nmap -p- -T4 {domain_or_ip}",
            f"sudo nmap -O -A {domain_or_ip}",
            f"nmap -f --mtu 16 {domain_or_ip}"
        ],
        "Web & DNS Enumeration": [
            f"nmap --script=http-title,http-headers,http-methods -p {port} {domain_or_ip}",
            f"nmap --script=dns-brute,dns-zone-transfer -p 53 {domain_or_ip}",
            f"whatweb {domain_or_ip}",
            f"nikto -h {domain_or_ip}",
            f"nikto -h {domain_or_ip} -ssl"
        ],
        "Vulnerability Scanning": [
            f"nmap --script=vulners -sV {domain_or_ip}",
            f"cd Sn1per && sudo sniper -t {domain_or_ip} -m full && cd .."
        ],
        "SQL Injection Testing (Optimized)": [
            f"sqlmap -u \"{target}\" --dbs --batch --level=1 --risk=1"
        ],
        "Credential Brute-Forcing": [
            f"proxychains hydra -L /usr/share/wordlists/metasploit/common_roots.txt -P /usr/share/wordlists/rockyou.txt -t 1 -w 5 {domain_or_ip} ssh",
            f"proxychains hydra -L /usr/share/wordlists/metasploit/common_roots.txt -P /usr/share/wordlists/rockyou.txt -t 1 -w 5 {domain_or_ip} ftp",
            f"proxychains hydra -L /usr/share/wordlists/metasploit/common_roots.txt -P /usr/share/wordlists/rockyou.txt -t 1 -w 5 {domain_or_ip} rdp",
            f"hydra -l admin -P /usr/share/wordlists/rockyou.txt {domain_or_ip} https-post-form \"/users/sign_in:email=^USER^&password=^PASS^:F=Invalid email or password.\""
        ],
        "Cross-Site Scripting (XSS) Testing": [
            f"xsser -u \"{domain_or_ip}\" -c 100 â€“Cl"
        ]
    }

    for category, cmds in commands.items():
        for command in cmds:
            run_command(command, category)

def multi_threaded_scan():
    threads = []
    for target in TARGETS:
        thread = threading.Thread(target=scan_target, args=(target,))
        threads.append(thread)
        thread.start()
        if len(threads) >= THREAD_COUNT:
            for t in threads:
                t.join()
            threads.clear()
    for t in threads:
        t.join()

def main():
    global TARGETS
    targets_input = input("Enter target IPs, domains, or URLs (comma-separated): ")
    TARGETS = [t.strip() for t in targets_input.split(',')]
    
    with open(OUTPUT_FILE, "w") as f:
        f.write(generate_html_report("<h1>Initial Penetration Test Output</h1>"))
    
    multi_threaded_scan()
    
    generate_analysis()
    
    threading.Thread(target=run_server, daemon=True).start()
    print(f"\nReports generated. Access them at:\n- Output: http://localhost:{PORT}/output.html\n- Analysis: http://localhost:{PORT}/analysis.html")

if __name__ == "__main__":
    main()

