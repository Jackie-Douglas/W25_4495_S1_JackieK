import subprocess
import ollama
import os

def run_command(command, timeout=None):
    """Runs a shell command and returns the output."""
    try:
        result = subprocess.run(command, capture_output=True, text=True, check=True, timeout=timeout)
        return result.stdout
    except subprocess.TimeoutExpired:
        print(f"Command timed out: {' '.join(command)}")
        return None
    except subprocess.CalledProcessError as e:
        print(f"Error running command: {e}")
        return None

def save_output(filename, content):
    """Saves content to a file."""
    with open(filename, "w") as file:
        file.write(content)
    print(f"Output saved to {filename}")

def analyze_with_ollama(scan_output):
    """Uses Ollama to analyze scan output and generate remediation steps."""
    prompt = f"""
    The following is the output of a security scan:
    {scan_output}
    Based on the above scan, provide detailed remediation steps for any vulnerabilities found.
    Include severity levels and a final summary of the findings.
    """
    
    print("Analyzing with Ollama...")
    response = ollama.chat(model="llama3", messages=[{"role": "user", "content": prompt}])
    return response["message"]["content"]

def generate_html_report(analysis, output_file="analysis.html"):
    """Generates an HTML file containing the remediation analysis."""
    html_content = f"""
    <html>
    <head><title>Remediation Report</title></head>
    <body>
        <h1>Remediation Report</h1>
        <pre>{analysis}</pre>
    </body>
    </html>
    """
    save_output(output_file, html_content)

def main():
    target = input("Enter the target domain: ")
    
    commands = [
        ("Full Nmap Scan", ["nmap", "-p-", "-sV", "-O", "-A", target]),
        ("SMB Vulnerability Scan", ["nmap", "--script", "smb-vuln-ms17-010,smb-vuln-ms08-067", "-p", "445", target]),
        ("RDP Vulnerability Scan", ["nmap", "--script", "rdp-vuln-ms12-020", "-p", "3389", target]),
        ("Apache Struts2 RCE Scan", ["nmap", "--script", "http-vuln-cve2017-5638", "-p", "80,443", target]),
        ("FTP Vulnerability Scan", ["nmap", "--script", "ftp-vuln-cve2010-4221", "-p", "21", target]),
        ("Drupal SQL Injection Scan", ["nmap", "--script", "http-vuln-cve2014-3704", "-p", "80,443", target]),
        ("Samba Remote Root Vulnerability Scan", ["nmap", "--script", "samba-vuln-cve-2012-1182", "-p", "139,445", target]),
        ("Vulners Full System Scan", ["nmap", "--script", "vulners", "-sV", target]),
        ("Nikto Web Server Scan - Tuning 0", ["nikto", "-h", target, "-Tuning", "0", "-maxtime", "15m"]),
        ("Nikto Web Server Scan - Tuning 1", ["nikto", "-h", target, "-Tuning", "1", "-maxtime", "15m"]),
        ("Nikto Web Server Scan - Tuning 2", ["nikto", "-h", target, "-Tuning", "2", "-maxtime", "15m"]),
        ("Nikto Web Server Scan - Tuning 3", ["nikto", "-h", target, "-Tuning", "3", "-maxtime", "15m"]),
        ("Nikto Web Server Scan - Tuning 4", ["nikto", "-h", target, "-Tuning", "4", "-maxtime", "15m"]),
        ("Nikto Web Server Scan - Tuning 5", ["nikto", "-h", target, "-Tuning", "5", "-maxtime", "15m"]),
        ("Nikto Web Server Scan - Tuning 6", ["nikto", "-h", target, "-Tuning", "6", "-maxtime", "15m"]),
    ]
    
    full_scan_results = ""
    
    for scan_name, command in commands:
        print(f"Running {scan_name}...")
        scan_result = run_command(command, timeout=300 if "nikto" in command else None)
        
        if scan_result:
            full_scan_results += f"\n\n--- {scan_name} ---\n\n" + scan_result
    
    if full_scan_results:
        save_output("scan_output.txt", full_scan_results)
        remediation_analysis = analyze_with_ollama(full_scan_results)
        generate_html_report(remediation_analysis)
        print("Analysis complete. Check analysis.html for the report.")

if __name__ == "__main__":
    main()

